{"ast":null,"code":"var _jsxFileName = \"C:\\\\Grader\\\\React\\\\react-final-project-hacktogram-v1\\\\src\\\\routes\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Start as null to indicate loading\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/users\"); // Fetch users from server\n        if (response.ok) {\n          const data = await response.json();\n          const userIdToCheck = \"someUserId\"; // Replace with the user ID you want to check\n          const user = data.find(user => user.id === userIdToCheck); // Check if user exists\n          setIsAuthenticated(!!users); // Set authentication status\n        } else {\n          setIsAuthenticated(false); // Server error\n        }\n      } catch (error) {\n        setIsAuthenticated(false); // Server error\n      }\n    };\n    checkAuthentication();\n  }, []);\n\n  // If authentication status is still being determined, show loading\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If user is authenticated, render children\n  if (isAuthenticated) {\n    return children; // Render the Home component and its nested routes\n  }\n\n  // If user is not authenticated, redirect to sign-in page\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n}\n_s(ProtectedRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","children","isAuthenticated","setIsAuthenticated","checkAuthentication","response","fetch","ok","data","json","userIdToCheck","user","find","id","users","error","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Grader/React/react-final-project-hacktogram-v1/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nfunction ProtectedRoute({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Start as null to indicate loading\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/users\"); // Fetch users from server\n        if (response.ok) {\n          const data = await response.json();\n          const userIdToCheck = \"someUserId\"; // Replace with the user ID you want to check\n          const user = data.find((user) => user.id === userIdToCheck); // Check if user exists\n          setIsAuthenticated(!!users); // Set authentication status\n        } else {\n          setIsAuthenticated(false); // Server error\n        }\n      } catch (error) {\n        setIsAuthenticated(false); // Server error\n      }\n    };\n\n    checkAuthentication();\n  }, []);\n\n  // If authentication status is still being determined, show loading\n  if (isAuthenticated === null) {\n    return <div>Loading...</div>;\n  }\n\n  // If user is authenticated, render children\n  if (isAuthenticated) {\n    return children; // Render the Home component and its nested routes\n  }\n\n  // If user is not authenticated, redirect to sign-in page\n  return <Navigate to=\"/signin\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,cAAcA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAClC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9DD,SAAS,CAAC,MAAM;IACd,MAAMW,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClC,MAAMC,aAAa,GAAG,YAAY,CAAC,CAAC;UACpC,MAAMC,IAAI,GAAGH,IAAI,CAACI,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKH,aAAa,CAAC,CAAC,CAAC;UAC7DP,kBAAkB,CAAC,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC;QAC/B,CAAC,MAAM;UACLX,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdZ,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC;IAEDC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,eAAe,KAAK,IAAI,EAAE;IAC5B,oBAAOL,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,IAAIjB,eAAe,EAAE;IACnB,OAAOD,QAAQ,CAAC,CAAC;EACnB;;EAEA;EACA,oBAAOJ,OAAA,CAACF,QAAQ;IAACyB,EAAE,EAAC;EAAS;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC;AAACnB,EAAA,CAnCQF,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAqCvB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}