{"ast":null,"code":"var _jsxFileName = \"C:\\\\Grader\\\\React\\\\react-final-project-hacktogram-v1\\\\src\\\\routes\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  // useEffect(() => {\n  //   const checkAuthentication = async () => {\n  //     // Ambil userId dari localStorage\n  //     const userId = localStorage.getItem(\"userId\");\n  //     if (!userId) {\n  //       setIsAuthenticated(false);\n  //       return;\n  //     }\n\n  //     try {\n  //       // Kirim permintaan ke server untuk memeriksa autentikasi\n  //       // const response = await fetch(\"http://localhost:3001/users\", {\n  //       //   method: \"GET\",\n  //       // });\n  //       const response = await fetch(\"http://localhost:3001/users\");        \n  //       // Periksa apakah respons berhasil\n  //       if (response.ok) {\n  //         const data = await response.json();\n  //         // Cari pengguna dengan id yang sesuai\n  //         const user = data.find((user) => user.id === userId);\n  //         // Jika pengguna ditemukan, pengguna terautentikasi\n  //         if (user) {\n  //           setIsAuthenticated(true);\n  //         } else {\n  //           setIsAuthenticated(false);\n  //         }\n  //       } else {\n  //         setIsAuthenticated(false);\n  //       }\n  //     } catch (error) {\n  //       // Jika terjadi kesalahan, pengguna tidak terautentikasi\n  //       setIsAuthenticated(false);\n  //     }\n  //   };\n\n  //   checkAuthentication();\n  // }, []);\n\n  // Jika status autentikasi belum ditentukan, tampilkan loading atau komponen lain\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this);\n  }\n\n  // Jika pengguna terautentikasi, render children\n  if (isAuthenticated) {\n    return children;\n  }\n\n  // Jika pengguna tidak terautentikasi, arahkan ke halaman SignIn\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}\n_s(ProtectedRoute, \"xvqciLNQBwWvJ2RWKCNQsf0Sz6M=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","children","isAuthenticated","setIsAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Grader/React/react-final-project-hacktogram-v1/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nfunction ProtectedRoute({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  // useEffect(() => {\n  //   const checkAuthentication = async () => {\n  //     // Ambil userId dari localStorage\n  //     const userId = localStorage.getItem(\"userId\");\n  //     if (!userId) {\n  //       setIsAuthenticated(false);\n  //       return;\n  //     }\n\n  //     try {\n  //       // Kirim permintaan ke server untuk memeriksa autentikasi\n  //       // const response = await fetch(\"http://localhost:3001/users\", {\n  //       //   method: \"GET\",\n  //       // });\n  //       const response = await fetch(\"http://localhost:3001/users\");        \n  //       // Periksa apakah respons berhasil\n  //       if (response.ok) {\n  //         const data = await response.json();\n  //         // Cari pengguna dengan id yang sesuai\n  //         const user = data.find((user) => user.id === userId);\n  //         // Jika pengguna ditemukan, pengguna terautentikasi\n  //         if (user) {\n  //           setIsAuthenticated(true);\n  //         } else {\n  //           setIsAuthenticated(false);\n  //         }\n  //       } else {\n  //         setIsAuthenticated(false);\n  //       }\n  //     } catch (error) {\n  //       // Jika terjadi kesalahan, pengguna tidak terautentikasi\n  //       setIsAuthenticated(false);\n  //     }\n  //   };\n\n  //   checkAuthentication();\n  // }, []);\n\n  // Jika status autentikasi belum ditentukan, tampilkan loading atau komponen lain\n  if (isAuthenticated === null) {\n    return (\n    <div>Loading...</div>\n  );\n  }\n\n  // Jika pengguna terautentikasi, render children\n  if (isAuthenticated) {\n    return children;\n  }\n\n  // Jika pengguna tidak terautentikasi, arahkan ke halaman SignIn\n  return <Navigate to=\"/signin\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,cAAcA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAClC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA,IAAIQ,eAAe,KAAK,IAAI,EAAE;IAC5B,oBACAL,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEvB;;EAEA;EACA,IAAIL,eAAe,EAAE;IACnB,OAAOD,QAAQ;EACjB;;EAEA;EACA,oBAAOJ,OAAA,CAACF,QAAQ;IAACa,EAAE,EAAC;EAAS;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC;AAACP,EAAA,CAvDQF,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAyDvB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}