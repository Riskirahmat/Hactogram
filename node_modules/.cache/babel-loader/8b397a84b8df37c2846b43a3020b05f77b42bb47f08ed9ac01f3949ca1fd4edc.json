{"ast":null,"code":"var _jsxFileName = \"C:\\\\Grader\\\\React\\\\react-final-project-hacktogram-v1\\\\src\\\\routes\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\"; // Ensure useNavigate is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Initialize as null to indicate loading\n  const navigate = useNavigate(); // Get the navigate function\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/users\"); // Fetch users from server\n        if (response.ok) {\n          const data = await response.json();\n          const userIdToCheck = \"someUserId\"; // Replace with the user ID you want to check\n          const userExists = data.some(user => user.id === userIdToCheck); // Check if user exists\n          setIsAuthenticated(userExists); // Set authentication status\n        } else {\n          setIsAuthenticated(false); // Server error\n        }\n      } catch (error) {\n        setIsAuthenticated(false); // Server error\n      }\n    };\n    checkAuthentication();\n  }, []);\n\n  // If authentication status is still being determined, show loading\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If user is authenticated, redirect to home page\n  if (isAuthenticated) {\n    navigate(\"/home\"); // Redirect to home page\n    return null; // Return null to avoid rendering children immediately\n  }\n\n  // If user is not authenticated, redirect to sign-in page\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n_s(ProtectedRoute, \"nwic/4CFidGALQX/JP5v1S+PkMs=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useNavigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","children","isAuthenticated","setIsAuthenticated","navigate","checkAuthentication","response","fetch","ok","data","json","userIdToCheck","userExists","some","user","id","error","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Grader/React/react-final-project-hacktogram-v1/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\"; // Ensure useNavigate is imported\n\nfunction ProtectedRoute({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Initialize as null to indicate loading\n  const navigate = useNavigate(); // Get the navigate function\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/users\"); // Fetch users from server\n        if (response.ok) {\n          const data = await response.json();\n          const userIdToCheck = \"someUserId\"; // Replace with the user ID you want to check\n          const userExists = data.some((user) => user.id === userIdToCheck); // Check if user exists\n          setIsAuthenticated(userExists); // Set authentication status\n        } else {\n          setIsAuthenticated(false); // Server error\n        }\n      } catch (error) {\n        setIsAuthenticated(false); // Server error\n      }\n    };\n\n    checkAuthentication();\n  }, []);\n\n  // If authentication status is still being determined, show loading\n  if (isAuthenticated === null) {\n    return <div>Loading...</div>;\n  }\n\n  // If user is authenticated, redirect to home page\n  if (isAuthenticated) {\n    navigate(\"/home\"); // Redirect to home page\n    return null; // Return null to avoid rendering children immediately\n  }\n\n  // If user is not authenticated, redirect to sign-in page\n  return <Navigate to=\"/signin\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,cAAcA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAClC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCH,SAAS,CAAC,MAAM;IACd,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClC,MAAMC,aAAa,GAAG,YAAY,CAAC,CAAC;UACpC,MAAMC,UAAU,GAAGH,IAAI,CAACI,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,aAAa,CAAC,CAAC,CAAC;UACnER,kBAAkB,CAACS,UAAU,CAAC,CAAC,CAAC;QAClC,CAAC,MAAM;UACLT,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7B;MACF,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdb,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC;IAEDE,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIH,eAAe,KAAK,IAAI,EAAE;IAC5B,oBAAOL,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,IAAIlB,eAAe,EAAE;IACnBE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACnB,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,oBAAOP,OAAA,CAACH,QAAQ;IAAC2B,EAAE,EAAC;EAAS;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC;AAACpB,EAAA,CArCQF,cAAc;EAAA,QAEJH,WAAW;AAAA;AAAA2B,EAAA,GAFrBxB,cAAc;AAuCvB,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}