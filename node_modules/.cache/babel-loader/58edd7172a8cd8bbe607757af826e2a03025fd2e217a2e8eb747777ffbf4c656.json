{"ast":null,"code":"var _jsxFileName = \"C:\\\\Grader\\\\React\\\\react-final-project-hacktogram-v1\\\\src\\\\routes\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        // Ambil userId dari localStorage\n        const userId = localStorage.getItem(\"userId\");\n        if (!userId) {\n          setIsAuthenticated(false);\n          return;\n        }\n\n        // Kirim permintaan ke server untuk memeriksa autentikasi\n        const response = await fetch(\"http://localhost:3001/users\", {\n          method: \"GET\"\n        });\n\n        // Periksa apakah respons berhasil\n        if (response.ok) {\n          const data = await response.json();\n          // Cari pengguna dengan id yang sesuai\n          const user = data.find(user => user.id === userId);\n          // Jika pengguna ditemukan, pengguna terautentikasi\n          if (user) {\n            setIsAuthenticated(true);\n          } else {\n            setIsAuthenticated(false);\n          }\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        // Jika terjadi kesalahan, pengguna tidak terautentikasi\n        setIsAuthenticated(false);\n      }\n    };\n    checkAuthentication();\n  }, []);\n\n  // Jika status autentikasi belum ditentukan, tampilkan loading atau komponen lain\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Jika pengguna terautentikasi, render children\n  if (isAuthenticated) {\n    return children;\n  }\n\n  // Jika pengguna tidak terautentikasi, arahkan ke halaman SignIn\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n}\n_s(ProtectedRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","_s","children","isAuthenticated","setIsAuthenticated","checkAuthentication","userId","localStorage","getItem","response","fetch","method","ok","data","json","user","find","id","error","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Grader/React/react-final-project-hacktogram-v1/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nfunction ProtectedRoute({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        // Ambil userId dari localStorage\n        const userId = localStorage.getItem(\"userId\");\n        if (!userId) {\n          setIsAuthenticated(false);\n          return;\n        }\n\n        // Kirim permintaan ke server untuk memeriksa autentikasi\n        const response = await fetch(\"http://localhost:3001/users\", {\n          method: \"GET\",\n        });\n\n        // Periksa apakah respons berhasil\n        if (response.ok) {\n          const data = await response.json();\n          // Cari pengguna dengan id yang sesuai\n          const user = data.find((user) => user.id === userId);\n          // Jika pengguna ditemukan, pengguna terautentikasi\n          if (user) {\n            setIsAuthenticated(true);\n          } else {\n            setIsAuthenticated(false);\n          }\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        // Jika terjadi kesalahan, pengguna tidak terautentikasi\n        setIsAuthenticated(false);\n      }\n    };\n\n    checkAuthentication();\n  }, []);\n\n  // Jika status autentikasi belum ditentukan, tampilkan loading atau komponen lain\n  if (isAuthenticated === null) {\n    return <div>Loading...</div>;\n  }\n\n  // Jika pengguna terautentikasi, render children\n  if (isAuthenticated) {\n    return children;\n  }\n\n  // Jika pengguna tidak terautentikasi, arahkan ke halaman SignIn\n  return <Navigate to=\"/signin\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,cAAcA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAClC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd,MAAMW,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;QAC7C,IAAI,CAACF,MAAM,EAAE;UACXF,kBAAkB,CAAC,KAAK,CAAC;UACzB;QACF;;QAEA;QACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UAC1DC,MAAM,EAAE;QACV,CAAC,CAAC;;QAEF;QACA,IAAIF,QAAQ,CAACG,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClC;UACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKX,MAAM,CAAC;UACpD;UACA,IAAIS,IAAI,EAAE;YACRX,kBAAkB,CAAC,IAAI,CAAC;UAC1B,CAAC,MAAM;YACLA,kBAAkB,CAAC,KAAK,CAAC;UAC3B;QACF,CAAC,MAAM;UACLA,kBAAkB,CAAC,KAAK,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOc,KAAK,EAAE;QACd;QACAd,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC;IAEDC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,eAAe,KAAK,IAAI,EAAE;IAC5B,oBAAOL,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,IAAInB,eAAe,EAAE;IACnB,OAAOD,QAAQ;EACjB;;EAEA;EACA,oBAAOJ,OAAA,CAACF,QAAQ;IAAC2B,EAAE,EAAC;EAAS;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC;AAACrB,EAAA,CArDQF,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAuDvB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}